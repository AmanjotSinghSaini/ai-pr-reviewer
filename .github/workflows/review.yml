name: 'AI Code Reviewer'

on:
  workflow_call:
    inputs:
      ai_model:
        description: 'AI model to use for code review'
        required: false
        type: string
        default: 'gpt-4o-mini'
      exclude_paths:
        description: 'Comma-separated paths to exclude from AI review'
        required: false
        type: string
        default: '*.md,*.txt,*.json,package-lock.json,yarn.lock'
      max_file_lines:
        description: 'Maximum lines to include from each file (0 for no limit)'
        required: false
        type: number
        default: 1000
      max_files:
        description: 'Maximum number of files to review'
        required: false
        type: number
        default: 20
    secrets:
      AI_GITHUB_TOKEN:
        description: 'GitHub Personal Access Token with models:read permission'
        required: true

jobs:
  ai-code-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    permissions:
      contents: read
      pull-requests: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Get changed files
        id: changed-files
        run: |
          echo "Getting changed files between base and head..."
          
          # Get list of changed files
          git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} > changed_files.txt
          
          echo "Changed files:"
          cat changed_files.txt
          
          # Filter out excluded paths
          IFS=',' read -ra EXCLUDE_ARRAY <<< "${{ inputs.exclude_paths }}"
          
          filtered_files=""
          while IFS= read -r file; do
            if [[ -z "$file" ]]; then continue; fi
            
            exclude_file=false
            for pattern in "${EXCLUDE_ARRAY[@]}"; do
              pattern=$(echo "$pattern" | xargs) # trim whitespace
              if [[ "$file" == $pattern ]] || [[ "$file" == *"$pattern"* ]]; then
                exclude_file=true
                break
              fi
            done
            
            if [[ "$exclude_file" == false && -f "$file" ]]; then
              filtered_files="$filtered_files$file"$'\n'
            fi
          done < changed_files.txt
          
          echo -n "$filtered_files" > filtered_changed_files.txt
          
          echo "Filtered files for review:"
          cat filtered_changed_files.txt
          
          if [[ -s filtered_changed_files.txt ]]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Prepare code for AI review
        if: steps.changed-files.outputs.has_changes == 'true'
        id: prepare-code
        run: |
          echo "Preparing code for AI review..."
          
          review_content=""
          file_count=0
          total_lines=0
          max_files=${{ inputs.max_files }}
          max_lines=${{ inputs.max_file_lines }}
          
          while IFS= read -r file; do
            if [[ -n "$file" && -f "$file" && -s "$file" ]]; then
              file_size=$(wc -l < "$file" 2>/dev/null || echo "0")
              
              echo "Processing file: $file ($file_size lines)"
              
              file_extension="${file##*.}"
              
              # Handle large files based on max_lines setting
              if [[ $max_lines -gt 0 && $file_size -gt $max_lines ]]; then
                echo "File is large ($file_size lines), truncating to first $max_lines lines"
                review_content="$review_content\n\n### üìÑ File: \`$file\` ($file_size lines - showing first $max_lines lines)\n\`\`\`$file_extension\n$(head -n $max_lines "$file")\n... [File truncated for review - original file has $file_size lines] ...\n\`\`\`"
              elif [[ $max_lines -eq 0 ]]; then
                echo "Including full file content ($file_size lines)"
                review_content="$review_content\n\n### üìÑ File: \`$file\` ($file_size lines)\n\`\`\`$file_extension\n$(cat "$file")\n\`\`\`"
              else
                review_content="$review_content\n\n### üìÑ File: \`$file\` ($file_size lines)\n\`\`\`$file_extension\n$(cat "$file")\n\`\`\`"
              fi
              
              file_count=$((file_count + 1))
              total_lines=$((total_lines + file_size))
              
              # Stop if we reach max files limit
              if [[ $file_count -ge $max_files ]]; then
                remaining_files=$(wc -l < filtered_changed_files.txt)
                remaining_files=$((remaining_files - file_count))
                if [[ $remaining_files -gt 0 ]]; then
                  review_content="$review_content\n\n*Note: Review limited to first $file_count files. $remaining_files additional files were not included to stay within limits.*"
                fi
                break
              fi
            fi
          done < filtered_changed_files.txt
          
          echo -e "$review_content" > code_for_review.txt
          
          echo "file_count=$file_count" >> $GITHUB_OUTPUT
          echo "total_lines=$total_lines" >> $GITHUB_OUTPUT
          
          echo "Prepared $file_count files ($total_lines lines) for review"

      - name: AI Code Review
        if: steps.changed-files.outputs.has_changes == 'true'
        id: ai-review
        run: |
          echo "Starting AI code review using GitHub Models..."
          
          # Create the review prompt
          cat << 'EOF' > review_prompt.txt
          You are an expert code reviewer. Please analyze the following code changes in a pull request and provide constructive feedback.

          **Focus Areas:**
          1. **Security Issues**: Vulnerabilities, injection risks, unsafe practices
          2. **Code Quality**: Logic errors, potential bugs, error handling  
          3. **Performance**: Inefficient algorithms, resource usage issues
          4. **Best Practices**: Coding standards, design patterns, maintainability
          5. **Documentation**: Missing comments, unclear naming

          **Response Format:**
          Please structure your response exactly like this:

          ## ü§ñ AI Code Review

          ### ‚úÖ What's Working Well
          - [List positive aspects of the code]

          ### ‚ö†Ô∏è Issues Found  
          - **[HIGH/MEDIUM/LOW]**: [Issue description]
            - *Suggestion*: [How to fix it]
            - *Example*: [Code example if helpful]

          ### üí° Recommendations
          - [General improvement suggestions]

          **Be specific, constructive, and focus on actionable feedback. If code looks good, mention that too.**

          ---

          **Code Changes to Review:**
          EOF
          
          # Append the code content
          cat code_for_review.txt >> review_prompt.txt
          
          echo "Making API request to GitHub Models..."
          
          response=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Authorization: Bearer ${{ secrets.AI_GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$(jq -n \
              --arg model "${{ inputs.ai_model }}" \
              --arg content "$(cat review_prompt.txt)" \
              '{
                "model": $model,
                "messages": [
                  {
                    "role": "user", 
                    "content": $content
                  }
                ],
                "max_tokens": 2000,
                "temperature": 0.3
              }')" \
            "https://models.inference.ai.azure.com/chat/completions")
          
          # Split response and status code
          http_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | head -n -1)
          
          echo "HTTP Status Code: $http_code"
          
          if [[ "$http_code" == "200" ]]; then
            # Extract AI response
            ai_feedback=$(echo "$response_body" | jq -r '.choices[0].message.content // empty')
            
            if [[ -n "$ai_feedback" && "$ai_feedback" != "null" ]]; then
              echo "$ai_feedback" > ai_review_results.txt
              echo "review_completed=true" >> $GITHUB_OUTPUT
              echo "AI review completed successfully"
            else
              echo "## ü§ñ AI Code Review\n\n‚ö†Ô∏è AI review completed but no content was returned. Please review the changes manually." > ai_review_results.txt
              echo "review_completed=partial" >> $GITHUB_OUTPUT
            fi
          else
            echo "API Error - Status: $http_code"
            echo "$response_body"
            echo "## ü§ñ AI Code Review\n\n‚ö†Ô∏è AI review service returned error (HTTP $http_code). Please review the code changes manually.\n\nThe changes are ready for human review." > ai_review_results.txt
            echo "review_completed=false" >> $GITHUB_OUTPUT
          fi

      - name: Post Review Comment
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            let comment = '# ü§ñ Automated Code Review Report\n\n';
            comment += `*Generated on: ${new Date().toLocaleString('en-US', {timeZone: 'UTC'})} UTC*\n\n`;
            
            // Add AI review results
            if ('${{ steps.changed-files.outputs.has_changes }}' === 'true') {
              try {
                const aiResults = fs.readFileSync('ai_review_results.txt', 'utf8');
                comment += aiResults + '\n\n';
              } catch (error) {
                comment += '## ü§ñ AI Code Review\n\n‚ö†Ô∏è AI code review could not be completed.\n\n';
              }
              
              comment += '---\n\n';
              comment += `üìä **Review Statistics**\n`;
              comment += `- **Files Reviewed**: ${{ steps.prepare-code.outputs.file_count || 0 }}\n`;
              comment += `- **Lines of Code**: ${{ steps.prepare-code.outputs.total_lines || 0 }}\n`;
              comment += `- **AI Model Used**: ${{ inputs.ai_model }}\n`;
              comment += `- **Max Lines Per File**: ${{ inputs.max_file_lines }}\n`;
              comment += `- **Max Files**: ${{ inputs.max_files }}\n\n`;
            } else {
              comment += '## üìù Code Review Status\n\n';
              comment += '‚ÑπÔ∏è No reviewable code changes detected in this pull request.\n\n';
            }
            
            comment += '---\n';
            comment += '*This is an automated review powered by GitHub Models. Human oversight is recommended for production deployments.*';
            
            // Post the comment
            try {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              console.log('Review comment posted successfully');
            } catch (error) {
              console.error('Failed to post comment:', error);
              core.setFailed(`Failed to post review comment: ${error.message}`);
            }

      - name: Cleanup temporary files
        if: always()
        run: |
          echo "Cleaning up temporary files..."
          rm -f changed_files.txt filtered_changed_files.txt code_for_review.txt
          rm -f review_prompt.txt ai_review_results.txt
          echo "Cleanup completed"
